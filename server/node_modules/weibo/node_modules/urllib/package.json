{
  "name": "urllib",
  "version": "0.3.7",
  "description": "Help in opening URLs (mostly HTTP) in a complex world — basic and digest authentication, redirections, cookies and more.",
  "keywords": [
    "urllib",
    "http",
    "urlopen",
    "curl",
    "wget"
  ],
  "author": {
    "name": "fengmk2",
    "email": "fengmk2@gmail.com",
    "url": "http://github.com/fengmk2"
  },
  "homepage": "http://github.com/TBEDP/urllib",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/TBEDP/urllib.git"
  },
  "scripts": {
    "test": "make test-all"
  },
  "dependencies": {
    "buffer-concat": "0.0.1"
  },
  "devDependencies": {
    "should": ">=0.4.2",
    "pedding": "*",
    "blanket": "*",
    "travis-cov": "*",
    "coveralls": "*",
    "mocha-lcov-reporter": "*",
    "formstream": "*",
    "agentkeepalive": "*",
    "node-patch": "*",
    "mocha": ">=0.14.1"
  },
  "engines": {
    "node": ">= 0.6.10"
  },
  "license": "MIT",
  "contributors": [
    {
      "name": "fengmk2",
      "email": "fengmk2@gmail.com",
      "url": "http://fengmk2.github.com"
    },
    {
      "name": "aleafs",
      "email": "zhangxc83@gmail.com",
      "url": "https://github.com/aleafs"
    },
    {
      "name": "Jackson Tian",
      "email": "shyvo1987@gmail.com",
      "url": "https://github.com/JacksonTian"
    }
  ],
  "readme": "# urllib [![Build Status](https://secure.travis-ci.org/TBEDP/urllib.png?branch=master)](http://travis-ci.org/TBEDP/urllib) [![Coverage Status](https://coveralls.io/repos/TBEDP/urllib/badge.png)](https://coveralls.io/r/TBEDP/urllib)\n\n![logo](https://raw.github.com/TBEDP/urllib/master/logo.png)\n\nHelp in opening URLs (mostly HTTP) in a complex world — basic and digest authentication, redirections, cookies and more.\n\n## Install\n\n```bash\n$ npm install urllib\n```\n\n## Usage\n\n```js\nvar urllib = require('urllib');\n\nurllib.request('http://cnodejs.org/', { wd: 'nodejs' }, function (err, data, res) {\n  if (err) {\n    throw err; // you need to handle error\n  }\n  console.log(res.statusCode);\n  console.log(res.headers);\n  // data is Buffer instance\n  console.log(data.toString());\n});\n```\n\n## API Doc\n\n### .request(url[, options][, callback][, content])\n\n#### Arguments\n\n- **url** String | Object - The URL to request, either a String or a Object that return by [url.parse](http://nodejs.org/api/url.html#url_url_parse_urlstr_parsequerystring_slashesdenotehost).\n- ***options*** Object - Optional\n  - ***method*** String - Request method, defaults to `GET`. Could be `GET`, `POST`, `DELETE` or `PUT`. Alias 'type'.\n  - ***data*** Object - Data to be sent. Will be stringify automatically.\n  - ***content*** String | [Buffer](http://nodejs.org/api/buffer.html) - Manually set the content of payload. If set, `data` will be ignored.\n  - ***stream*** [stream.Readable](http://nodejs.org/api/stream.html#stream_class_stream_readable) - Stream to be pipe to the remote. If set, `data` and `content` will be ignored.\n  - ***writeStream*** [stream.Writable](http://nodejs.org/api/stream.html#stream_class_stream_writable) - A writable stream to be piped by the response stream. Responding data will be write to this stream and `callback` will be called with `data` set `null` after finished writing.\n  - ***dataType*** String - Type of response data. Could be `text` or `json`. If it's `text`, the `callback`ed `data` would be a Buffer. If it's `json`, the `data` of callback would be a parsed JSON Object. Defaults to `text`.\n  - ***headers*** Object - Request headers.\n  - ***timeout*** Number - Request timeout in milliseconds. Defaults to `exports.TIMEOUT`.\n  - ***auth*** String - `username:password` used in HTTP Basic Authorization.\n  - ***agent*** [http.Agent](http://nodejs.org/api/http.html#http_class_http_agent) - HTTP Agent object.\n  - ***httpsAgent*** [https.Agent](http://nodejs.org/api/https.html#https_class_https_agent) - HTTPS Agent object.\n- ***callback(err, data, res)*** Function - Optional callback.\n  - **err** Error - Would be `null` if no error accured.\n  - **data** Buffer | Object - The data responsed. Would be a Buffer if `dataType` is set to `text` or an JSON parsed into Object if it's set to `json`.\n  - **res** [stream.Readable](http://nodejs.org/api/stream.html#stream_class_stream_readable) - The response stream.\n- ***context*** Object - Optional context object that will be binded to `this` of `callback`.\n\n#### Returns\n\n[stream.Writable](http://nodejs.org/api/stream.html#stream_class_stream_writable) - The request stream.\n\nCalling `.abort()` method of the request stream can cancel the request.\n\n#### `options.data`\n\nWhen making a request:\n\n```js\nurllib.request('http://example.com', {\n  method: 'GET',\n  data: {\n    'a': 'hello',\n    'b': 'world'\n  }\n});\n```\n\nFor `GET` request, `data` will be stringify to query string, e.g. `http://example.com/?a=hello&world`.\n\nFor `POST`, `PATCH` or `PUT` request, \nin defaults, the `data` will be stringify into `application/x-www-form-urlencoded` format\nif `Content-Type` header is not set.\n\n#### `options.content`\n\n`options.content` is useful when you wish to construct the request body by yourself, for example making a `Content-Type: application/json` request.\n\nNotes that if you want to send a JSON body, you should stringify it yourself:\n\n```js\nurllib.request('http://example.com', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  content: JSON.stringify({\n    'a': 'hello',\n    'b': 'world'\n  })\n});\n```\n\nIt would make a HTTP request like:\n\n```http\nPOST / HTTP/1.1\nHost: example.com\nContent-Type: application/json\n\n{\n  \"a\": \"hello\",\n  \"b\": \"world\"\n}\n```\n\n#### `options.stream`\n\nUploads a file with [formstream](https://github.com/fengmk2/formstream):\n\n```js\nvar urllib = require('urllib');\nvar formstream = require('formstream');\n\nvar form = formstream();\nform.file('file', __filename);\nform.field('hello', '你好urllib');\n\nvar req = urllib.request('http://my.server.com/upload', {\n  method: 'POST',\n  headers: form.headers(),\n  stream: form\n}, function (err, data) {\n  // upload finished\n});\n```\n\n## TODO\n\n* [ ] Support component\n* [√] Upload file like form upload\n* [ ] Auto redirect handle\n\n## Authors\n\nBelow is the output from `git-summary`.\n\n```bash\n$ git summary \n\n project  : urllib\n repo age : 2 years, 2 months\n active   : 28 days\n commits  : 71\n files    : 16\n authors  : \n    57  fengmk2                 80.3%\n     9  XiNGRZ                  12.7%\n     4  Jackson Tian            5.6%\n     1  aleafs                  1.4%\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011-2013 fengmk2 &lt;fengmk2@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TBEDP/urllib/issues"
  },
  "_id": "urllib@0.3.7",
  "_from": "urllib@>=0.2.9"
}
